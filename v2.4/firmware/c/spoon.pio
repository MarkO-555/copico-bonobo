; spoon.pio -- for bonobo 2.4 -- strick
; SPDX-License-Identifier: MIT
;
; Spoonfeeds two three-byte instructions,
; assuming six fetch cycles in a row.
;
; If the first instruction is LDD #immediate,
; that is exactly 3 fetch cycles and no other cycles.
;
; Good candidates for the second instruction are
; STD extended, STB extended, and JMP extended,
; all of which begin with 3 fetch cycles.
;
; The state machine autopulls two 32-bit words.
; The eight bytes begin with 0xFF (direction output),
; then the first instruction, then the second instruction,
; and finally 0x00 (direction input).
;
; The bytes must be arrange Least Significant Byte
; to Most Significant Byte, in each word.
;
; HALT is asserted (low) before coming in to this SM,
; and is left asserted (low) upon loop_forever.
; Therefore SPOON must also be asserted along with HALT.

;; E_PIN = 21

.program spoon_pio
.side_set 4 opt

    ; synchronize on a full pulse of E
    wait    1 gpio, 21    ; wait until E hi
    wait    0 gpio, 21    ; wait until E lo

    set     x, 2         side 0b0111  ; 2 because 3 times; all=no (unhalts)
three_times:
    wait    1 gpio, 21                
    wait    0 gpio, 21
    jmp     x--, three_times

    set     x, 4                      ; 4 because 5 times.
    out     pindirs, 8  side 0b0010  ; spoon=Yes slenb=Yes dir=Out
file_times:
    out     pins, 8
    wait    1 gpio, 21
    wait    0 gpio, 21
    jmp     x--, file_times

    ; sixth time is unrolled
    out     pins, 8
    wait    1 gpio, 21    side 0b0000 ; unhalt early for 6809
    wait    0 gpio, 21

    out     pindirs, 8    side 0b0101  ; spoon=Yes halt=Yes

loop_forever:
    jmp     loop_forever    ; until pio_sm_exec(pioSF, smF, offsetF)

% c-sdk {

void spoon_program_init(PIO pio, uint sm, uint offset) {
   //
   //  pico-examples/pio/hub75/hub75.pio shows order of inits.
   //

   pio_sm_config cf = spoon_pio_program_get_default_config(offset);
   sm_config_set_out_pins(&cf, G_D_BEGIN, G_D_SIZE);
   sm_config_set_sideset_pins(&cf, G_DIR); // then G_HALT, G_SLENB, and G_SPOON.
   sm_config_set_clkdiv(&cf, /*CLOCK_DIVISOR*/ 1);

   // OUT: Shift to right.  Do AUTOPULL with threshold 32.
   const bool OUT_SHIFT_RIGHT = true;
   const bool AUTOPULL = true;
   const uint PULL_THRESHOLD = 32;
   sm_config_set_out_shift(&cf, OUT_SHIFT_RIGHT, AUTOPULL, PULL_THRESHOLD);

   pio_sm_init(pio, sm, offset, &cf);  // Apply the config.
   pio_sm_exec(pio, sm, offset);       // Reset PC, but don't run yet.
}

%}
