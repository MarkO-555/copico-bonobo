; on_reset.pio -- for bonobo 2.4 -- strick
; SPDX-License-Identifier: MIT

;; E_PIN = 21

.program spoon_pio
.side_set 4 opt

    ; synchronize on a full pulse of E
    wait    1 gpio, 21    ; wait until E hi
    wait    0 gpio, 21    ; wait until E lo

    set     x, 2         side 0b0111  ; 2 because 3 times; all=no (unhalts)
three_times:
    wait    1 gpio, 21                
    wait    0 gpio, 21
    jmp     x--, three_times

    set     x, 4                      ; 4 because 5 times.
    out     pindirs, 8  side 0b0010  ; spoon=Yes slenb=Yes dir=Out
file_times:
    out     pins, 8
    wait    1 gpio, 21
    wait    0 gpio, 21
    jmp     x--, file_times

    ; sixth time is unrolled
    out     pins, 8
    wait    1 gpio, 21    side 0b0101 ; early for 6809
    wait    0 gpio, 21

    out     pindirs, 8    side 0b0101  ; spoon=Yes halt=Yes

loop_forever:
    jmp     loop_forever


% c-sdk {

void spoon_program_init(PIO pio, uint sm, uint offset) {
   //
   //  pico-examples/pio/hub75/hub75.pio shows order of inits.
   //
   //### pio_sm_set_consecutive_pindirs(pio, sm, 6, 2, true/*out*/);  // cart, nmi
   pio_sm_set_consecutive_pindirs(pio, sm, 8, 8, false/*in*/);  // data bus
   pio_sm_set_consecutive_pindirs(pio, sm, 16, 4, true/*out*/); // spoon control
   pio_sm_set_consecutive_pindirs(pio, sm, 20, 2, false/*in*/); // reset, Eclk
   for (uint i = 8; i < 20; i++) {
       pio_gpio_init(pio, i);
   }

   pio_sm_config cf = spoon_pio_program_get_default_config(offset);
   // sm_config_set_jmp_pin(&cf, 8);
   // sm_config_set_in_pins(&cf, 8); // not used.
   sm_config_set_out_pins(&cf, 8, 8);
   // sm_config_set_sideset(&cf, 4, false, false);
   sm_config_set_sideset_pins(&cf, 16);
   sm_config_set_clkdiv(&cf, /*CLOCK_DIVISOR*/ 1);

    // NOT USED
   // IN: Shift from left, do autopush
   // const bool IN_SHIFT_RIGHT = false;
   // const bool AUTOPUSH = false;
   // const uint PUSH_THRESHOLD = 16;
   // sm_config_set_in_shift(&cf, IN_SHIFT_RIGHT, AUTOPUSH, PUSH_THRESHOLD);

   // OUT: Shift to right, don't autopull, threshold 32
   const bool OUT_SHIFT_RIGHT = true;
   const bool AUTOPULL = true;
   const uint PULL_THRESHOLD = 32;
   sm_config_set_out_shift(&cf, OUT_SHIFT_RIGHT, AUTOPULL, PULL_THRESHOLD);

   pio_sm_init(pio, sm, offset, &cf);
   pio_sm_exec(pio, sm, offset);
}
%}
