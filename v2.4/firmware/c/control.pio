; control.pio -- for the TFR/901 -- strick
;
; SPDX-License-Identifier: MIT

; WRITE_CONTROL = 22

.program control_pio
.wrap_target
    wait 0 gpio 22
    in pins, 8
    wait 1 gpio 22
.wrap

% c-sdk {

#define CLOCK_DIVISOR 8

#define DIRECTION_IN false

void control_pio_init(PIO pio, uint sm, uint offset) {
   //
   //  pico-examples/pio/hub75/hub75.pio shows order of inits.
   //
   pio_sm_set_consecutive_pindirs(pio, sm, /*base*/8, /*count*/8, DIRECTION_IN);
   pio_sm_set_consecutive_pindirs(pio, sm, /*base*/22, /*count*/1, DIRECTION_IN);

   // ------- only if PIO writes to GPIO
   //for (uint i = 8; i < 16; i++) {
    //   pio_gpio_init(pio, i);
   //}
   // pio_gpio_init(pio, 22);

   pio_sm_config cf = control_pio_program_get_default_config(offset);
   sm_config_set_in_pins(&cf, 8);
   //XX sm_config_set_out_pins(&cf, 0, 16);
   //XX sm_config_set_sideset(&cf, 5, false, false);
   //XX sm_config_set_sideset_pins(&cf, 16);
   sm_config_set_clkdiv(&cf, CLOCK_DIVISOR);

   // IN: Shift from left, do autopush
   const bool IN_SHIFT_RIGHT = false;
   const bool AUTOPUSH = true;
   const uint PUSH_THRESHOLD = 8;
   sm_config_set_in_shift(&cf, IN_SHIFT_RIGHT, AUTOPUSH, PUSH_THRESHOLD);

   //X // OUT: Shift to right, don't autopull, threshold 29
   //X const bool OUT_SHIFT_RIGHT = true;
   //X const bool AUTOPULL = false;
   //X const uint PULL_THRESHOLD = 16;
   //X sm_config_set_out_shift(&cf, OUT_SHIFT_RIGHT, AUTOPULL, PULL_THRESHOLD);

   pio_sm_init(pio, sm, offset, &cf);
   pio_sm_exec(pio, sm, offset);
   pio_sm_set_enabled(pio, sm, true);
}
%}
