; on_reset.pio -- for bonobo 2.4 -- strick
; SPDX-License-Identifier: MIT

#define E_PIN 21

.program onreset
.side_set 4

    ; synchronize on a full pulse of E
    wait    1, gpio, E_PIN    ; wait until E hi
    wait    0, gpio, E_PIN    ; wait until E lo

    set     x, 3        side 0b0111
four_times:
    wait    1, pgio, E_PIN
    wait    0, pgio, E_PIN
    jmp     x--, four_times

    out     pindirs, 8  side 0b0010
    out     pins, 8
    wait    1, pgio, E_PIN
    wait    0, pgio, E_PIN
    out     pins, 8
    wait    1, pgio, E_PIN
    wait    0, pgio, E_PIN
    out     pindirs, 8

loop_forever:
    jmp     loop_forever


% c-sdk {

#define CLOCK_DIVISOR 2

void onreset_program_init(PIO pio, uint sm, uint offset) {
   //
   //  pico-examples/pio/hub75/hub75.pio shows order of inits.
   //
   pio_sm_set_consecutive_pindirs(pio, sm, 8, 8, false/*in*/);  // data bus
   pio_sm_set_consecutive_pindirs(pio, sm, 16, 4, true/*out*/); // spoon control
   for (uint i = 6; i <= 22; i++) {
       pio_gpio_init(pio, i);
   }
   for (uint i = 26; i <= 28; i++) {
       pio_gpio_init(pio, i);
   }

   pio_sm_config cf = onreset_program_get_default_config(offset);
   // sm_config_set_jmp_pin(&cf, 8);
   sm_config_set_in_pins(&cf, 8);
   sm_config_set_out_pins(&cf, 8, 8);
   sm_config_set_sideset(&cf, 4, false, false);
   sm_config_set_sideset_pins(&cf, 16);
   sm_config_set_clkdiv(&cf, CLOCK_DIVISOR);

    // NOT USED
   // IN: Shift from left, do autopush
   const bool IN_SHIFT_RIGHT = false;
   const bool AUTOPUSH = false;
   const uint PUSH_THRESHOLD = 16;
   sm_config_set_in_shift(&cf, IN_SHIFT_RIGHT, AUTOPUSH, PUSH_THRESHOLD);

   // OUT: Shift to right, don't autopull, threshold 29
   const bool OUT_SHIFT_RIGHT = true;
   const bool AUTOPULL = true;
   const uint PULL_THRESHOLD = 16;
   sm_config_set_out_shift(&cf, OUT_SHIFT_RIGHT, AUTOPULL, PULL_THRESHOLD);

   pio_sm_init(pio, sm, offset, &cf);
   pio_sm_exec(pio, sm, offset);
   pio_sm_set_enabled(pio, sm, true);
}
%}
